import { Request, Response } from "express";
import { Booking, BookingStatus } from "../model/booking-model";

export const createBooking = async (req: Request, res: Response) => {
  try {
    const {
      mentorId,
      studentId,
      date,
      times,
      price,
      category,
    } = req.body;

    // üõ° –®–∞–ª–≥–∞—Ö 1: –ó–∞–∞–≤–∞–ª –±”©–≥–ª”©—Ö —Ç–∞–ª–±–∞—Ä—É—É–¥
    if (!mentorId || !studentId || !date || !times || !price || !category) {
      return res.status(400).json({ message: "–ë“Ø—Ö —Ç–∞–ª–±–∞—Ä—ã–≥ –±“Ø—Ä—ç–Ω –±”©–≥–ª”©–Ω”© “Ø“Ø." });
    }

    // üõ° –®–∞–ª–≥–∞—Ö 2: times –Ω—å –º–∞—Å—Å–∏–≤ –º”©–Ω —ç—Å—ç—Ö
    if (!Array.isArray(times) || times.length === 0) {
      return res.status(400).json({ message: "–¶–∞–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –±—É—Ä—É—É –±–∞–π–Ω–∞." });
    }

    const bookingDate = new Date(date);

    // üß† Duplicate booking —à–∞–ª–≥–∞—Ö
    const existingBooking = await Booking.findOne({
      mentorId,
      date: bookingDate,
      times: { $in: times },
    });

    if (existingBooking) {
      return res.status(409).json({
        message: "–≠–Ω—ç —Ü–∞–≥—Ç –∞–ª—å —Ö—ç–¥–∏–π–Ω –∑–∞—Ö–∏–∞–ª–≥–∞ —Ö–∏–π–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞.",
      });
    }

    // ‚úÖ Booking “Ø“Ø—Å–≥—ç—Ö
    const newBooking = new Booking({
      mentorId,
      studentId,
      date: bookingDate,
      times,
      price,
      category,
      status: BookingStatus.PENDING,
    });

    await newBooking.save();

    return res.status(201).json({
      message: "–ó–∞—Ö–∏–∞–ª–≥–∞ –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç.",
      booking: newBooking,
    });
  } catch (error) {
    console.error("‚ùå –ó–∞—Ö–∏–∞–ª–≥–∞ “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
    return res.status(500).json({
      message: "–°–µ—Ä–≤–µ—Ä –¥—ç—ç—Ä –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –¢–∞ –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.",
    });
  }
};
