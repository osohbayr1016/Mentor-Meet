import { Request, Response } from "express";
import mongoose from "mongoose";
import { Booking, BookingStatus } from "../model/booking-model";

/**
 * @route   PATCH /api/bookings/:id/cancel
 * @desc    Cancel a mentor-student meeting
 * @access  Protected (optional ‚Äì depending on your middleware)
 */
export const cancelMeeting = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    console.log("üì• Received meeting ID to cancel:", id);

    // üîç 1. –®–∞–ª–≥–∞—Ö: ID —Ñ–æ—Ä–º–∞—Ç –∑”©–≤ —ç—Å—ç—Ö
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: "Meeting ID –±—É—Ä—É—É –±–∞–π–Ω–∞",
      });
    }

    // üîç 2. Booking –æ–ª–¥–æ—Ö —ç—Å—ç—Ö
    const booking = await Booking.findById(id);

    if (!booking) {
      return res.status(404).json({
        success: false,
        message: "Booking –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
      });
    }

    // üîÅ 3. –°—Ç–∞—Ç—É—Å ”©”©—Ä—á–ª”©—Ö
    booking.status = BookingStatus.CANCELLED;

    // üíæ 4. –•–∞–¥–≥–∞–ª–∞—Ö
    await booking.save();

    // ‚úÖ 5. –•–∞—Ä–∏—É –±—É—Ü–∞–∞—Ö
    return res.status(200).json({
      success: true,
      message: "–£—É–ª–∑–∞–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ü—É—Ü–ª–∞–≥–¥–ª–∞–∞",
    });
  } catch (error) {
    console.error("üî• cancelMeeting error:", error);
    return res.status(500).json({
      success: false,
      message: "–°–µ—Ä–≤–µ—Ä –¥—ç—ç—Ä –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞",
      error,
    });
  }
};
